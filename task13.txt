1.3. Есть ли разница между конструкциями:
open my $f, "file.txt" or die "$!\n";
и
open my $f, "file.txt" || die "$!\n";

Разница есть и существенная. or и || отличаются по приоритетам.

Самый очевидный пример, который поможет понять приоритеты:
perl -e 'my $x = 0; my $y = $x or 777; print "$y\n"'
0
perl -e 'my $x = 0; my $y = $x || 777; print "$y\n"'
777
В первом случае сначала переменной $y присвоилось значение переменной $x. После этого выполнилось нечто справа от or.
Во втором случае у || приоритет высокий. Сначала вычисляется значение $x. Так как оно не true, вычисляется часть справа от ||. Полученное значение присвоится переменной $y.
Эти выражения можно переписать в скобках для наглядности.
perl -e 'my $x = 0; ( my $y = $x ) or ( 777 ); print "$y\n"'
0
perl -e 'my $x = 0; my $y = ( $x or 777 ); print "$y\n"'
777

Если вернуться к изначальному вопросу, то в первом случае мы пытаемся открыть файл, и если open вернет не true, то код упадет с сообщением вроде: No such file or directory. Если переписать, то код выполняется так:
( open my $f, "file.txt" ) or ( die "$!\n" );
Во втором случае программиста ждет неожиданный поворот, и код падать не будет, потому что у || приоритет выше, чем у or. Если переписать выражение, то оно выглядит:
open my $f, ( "file.txt" or die "$!\n" );
Выражение "file.txt" - вполне себе true, поэтому open попробует открыть файл. Если такого файла не будет, падения не будет, код продолжит работу. Программиста ждут неожиданные сюрпризы.
